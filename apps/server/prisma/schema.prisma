generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String        @id @default(uuid())
  name        String
  image       String?
  quantity    Int
  rentPerDay  Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  RentOutItem RentOutItem[]
}

model Customer {
  id            String    @id @default(uuid())
  name          String
  phoneNumber   String
  addressLine1  String?
  addressLine2  String?
  city          String?
  image         String?
  documentImage String?
  rentOuts      RentOut[]
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum RentOutStatus {
  Pending
  Partially_Returned
  Returned
}

enum RentOutPaymentStatus {
  Pending
  Partially_Paid
  Paid
}

model RentOut {
  id             String               @id @default(uuid())
  customer       Customer             @relation(fields: [customerId], references: [id])
  customerId     String
  rentOutItems   RentOutItem[]
  rentPayments   RentPayment[]
  rentReturns    RentReturn[]
  discountAmount Float                @default(0)
  description    String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  status         RentOutStatus        @default(Pending)
  paymentStatus  RentOutPaymentStatus @default(Pending)
}

model RentPayment {
  id             String   @id @default(uuid())
  rentOut        RentOut  @relation(fields: [rentOutId], references: [id])
  rentOutId      String
  description    String?
  discountAmount Float    @default(0)
  receivedAmount Float
  totalAmount    Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model RentReturn {
  id          String       @id @default(uuid())
  returnItems ReturnItem[]
  rentOut     RentOut?     @relation(fields: [rentOutId], references: [id])
  rentOutId   String?
}

model ReturnItem {
  id            String      @id @default(uuid())
  rentOutItem   RentOutItem @relation(fields: [rentOutItemId], references: [id])
  rentOutItemId String
  quantity      Int
  total         Float
  createdAt     DateTime    @default(now())
  rentReturn    RentReturn? @relation(fields: [rentReturnId], references: [id])
  rentReturnId  String?
}

model RentOutItem {
  id         String       @id @default(uuid())
  product    Product      @relation(fields: [productId], references: [id])
  productId  String
  rentPerDay Float
  quantity   Int
  rentOut    RentOut?     @relation(fields: [rentOutId], references: [id])
  rentOutId  String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  returns    ReturnItem[]
}
